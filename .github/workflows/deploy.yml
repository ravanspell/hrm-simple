name: The deployment of the REST API

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
# Define environment variables that will be used across jobs
env:
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Create deployment .env file
    - name: Create .env file
      run: |
        cat > .env << EOF
        ENV='${{ env.ENV }}'
        AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_REGION='${{ secrets.AWS_REGION }}'
        MYSQL_ALLOW_EMPTY_PASSWORD='${{ env.MYSQL_ALLOW_EMPTY_PASSWORD }}'
        PRIMARY_DATABASE_TYPE='${{ env.PRIMARY_DATABASE_TYPE }}'
        PRIMARY_DATABASE='${{ env.PRIMARY_DATABASE }}'
        PRIMARY_DATABASE_PORT='${{ env.PRIMARY_DATABASE_PORT }}'
        PRIMARY_DATABASE_CONNECTION_LIMIT='${{ env.PRIMARY_DATABASE_CONNECTION_LIMIT }}'
        PRIMARY_DATABASE_PASSWORD='${{ secrets.PRIMARY_DATABASE_PASSWORD }}'
        PRIMARY_DATABASE_HOST='${{ env.PRIMARY_DATABASE_HOST }}'
        PRIMARY_DATABASE_USERNAME='${{ secrets.PRIMARY_DATABASE_USERNAME }}'
        PRIMARY_DATABASE_TIMEZONE='${{ env.PRIMARY_DATABASE_TIMEZONE }}'
        PRIMARY_DATABASE_LOGGING='${{ env.PRIMARY_DATABASE_LOGGING }}'
        PRIMARY_DATABASE_MAX_QUERY_EXECUTION_TIME='${{ env.PRIMARY_DATABASE_MAX_QUERY_EXECUTION_TIME }}'
        PRIMARY_DATABASE_IDLE_TIMEOUT='${{ env.PRIMARY_DATABASE_IDLE_TIMEOUT }}'
        PRIMARY_DATABASE_CONNECTION_TIMEOUT='${{ env.PRIMARY_DATABASE_CONNECTION_TIMEOUT }}'
        DATABASE_MIGRATIONS_RUN='${{ env.DATABASE_MIGRATIONS_RUN }}'
        SESSION_TOKEN_SECRET='${{ env.SESSION_TOKEN_SECRET }}'
        SESSION_TOKEN_SECRET_EXPIRATION_MS='${{ env.SESSION_TOKEN_SECRET_EXPIRATION_MS }}'
        PERMANENT_BUCKET_NAME='${{ env.PERMANENT_BUCKET_NAME }}'
        DIRTY_BUCKET_NAME='${{ env.DIRTY_BUCKET_NAME }}'
        NOTIFICATION_QUEUE_URL='${{ secrets.NOTIFICATION_QUEUE_URL }}'
        ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}'
        FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}'
        FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}'
        FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}'
        CLOUDFLARE_TURNSTILE_SECRET_KEY='${{ secrets.CLOUDFLARE_TURNSTILE_SECRET_KEY }}'
        EOF 

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        npm run build

    - name: EC2 deployment - Set up SSH key
      run: |
        # Create the SSH directory
        mkdir -p ~/.ssh
        echo "SSH directory created"
        
        # Write the key with line count check
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        echo "Key written to file, line count: $(wc -l < ~/.ssh/id_rsa)"
        
        # Set permissions
        chmod 600 ~/.ssh/id_rsa
        echo "Key permissions set to 600"
        
        # Check key format (without revealing private data)
        head -n 1 ~/.ssh/id_rsa | grep -q "BEGIN" && echo "Key appears to be in PEM format" || echo "ERROR: Key doesn't start with BEGIN line"
        
        # Add host to known_hosts
        echo "Running ssh-keyscan for ${{ secrets.EC2_HOST }}"
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || echo "ssh-keyscan failed with code $?"
        echo "Known hosts file now contains $(wc -l < ~/.ssh/known_hosts) lines"
      
    - name: EC2 deployment - Test SSH connection
      run: |
        echo "Testing SSH connection..."
        ssh -vvv -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "Connection successful"'
      
    - name: EC2 deployment -  Stop existing PM2 process
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          if pm2 describe the-hrm-api > /dev/null 2>&1; then
            pm2 stop the-hrm-api
            pm2 delete the-hrm-api
          fi
        '
    - name: EC2 deployment - Create deployment directory
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          rm -rf ~/api
          mkdir -p ~/api
        '
      
    - name: EC2 deployment - Copy application files to EC2
      run: |
        scp -i ~/.ssh/id_rsa -r \
          ./dist \
          ./package.json \
          ./package-lock.json \
          ./.env \
          ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/api/
      
    - name: EC2 deployment - Install dependencies and run database sync
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd ~/api
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          npm ci --production
            
          # Run TypeORM schema sync - Temporary disabled
          #node dist/typeorm-cli.js schema:sync
        '
      
    - name: EC2 deployment - Start application with PM2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd ~/api
          pm2 start dist/main.js --name "the-hrm-api"
          pm2 save
        '
      
    - name: EC2 deployment - Clean up SSH key
      if: always()
      run: rm -f ~/.ssh/id_rsa