// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText  // MediumText may be needed for MySql
  expiresAt   DateTime
}

model Organization {
  id          String      @id @default(uuid())
  name        String
  description String?
  logo        String?

  users              User[]
  employmentStatuses EmploymentStatus[]
  leaveTypes         LeaveType[]
  employeeLevels     EmployeeLevel[]
  empLeaveHistories  EmpLeaveHistory[]
  leaveBalances      LeaveBalance[]
  leaveAllocations   LeaveAllocation[]
  EmailSettings      EmailSettings[]
  files              FileMgt[]
  folders            Folder[]
}

model EmailSettings {
  id                     String      @id @default(uuid())
  emailHost              String
  emailPort              Int
  displayName            String
  defaultFromEmail       String
  emailHostUsername      String
  emailAuthPassword      String
  useTLS                 Boolean     @default(false)
  useSSL                 Boolean     @default(false)
  isPrimary              Boolean     @default(false)
  emailSendTimeout       Int         @default(30000)
  organizationId         String
  organization           Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model User {
  id               String      @id @default(uuid())
  organizationId   String
  firstName        String
  lastName         String
  password         String?
  email            String     @unique
  gender           String     
  dateOfBirth      DateTime
  employmentStatusId String
  employeeLevelId  String
  startDate        DateTime
  endDate          DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdBy        String
  updatedBy        String

  organization     Organization @relation(fields: [organizationId], references: [id])
  employmentStatus EmploymentStatus @relation(fields: [employmentStatusId], references: [id])
  employeeLevel    EmployeeLevel    @relation(fields: [employeeLevelId], references: [id])
  empLeaveHistories EmpLeaveHistory[]
  leaveBalances    LeaveBalance[]

  @@index([organizationId])
  @@index([employmentStatusId])
  @@index([employeeLevelId])
  @@index([email])
}

model EmploymentStatus {
  id              String      @id @default(uuid())
  status          String
  description     String?
  organizationId  String

  organization    Organization @relation(fields: [organizationId], references: [id])
  users           User[]

  @@index([organizationId])
}

model EmployeeLevel {
  id              String      @id @default(uuid())
  name            String
  description     String?
  organizationId  String

  organization    Organization @relation(fields: [organizationId], references: [id])
  users           User[]
  leaveAllocations LeaveAllocation[]

  @@index([organizationId])
}

model LeaveType {
  id              String      @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String
  updatedBy       String
  organizationId  String

  organization    Organization @relation(fields: [organizationId], references: [id])
  empLeaveHistories   EmpLeaveHistory[]
  leaveAllocations  LeaveAllocation[]
  leaveBalances     LeaveBalance[]

  @@index([organizationId])
}

model LeaveAllocation {
  id               String      @id @default(uuid())
  employeeLevelId  String
  leaveTypeId      String
  totalLeaveHours  Int
  organizationId   String

  employeeLevel  EmployeeLevel @relation(fields: [employeeLevelId], references: [id])
  leaveType      LeaveType     @relation(fields: [leaveTypeId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@index([employeeLevelId, leaveTypeId])
  @@index([organizationId])
}

model EmpLeaveHistory {
  id                String      @id @default(uuid())
  organizationId    String
  employeeId        String
  leaveTypeId       String
  leaveHours        Int
  status            String       
  approvedBy        Int
  comments          String?

  employee          User           @relation(fields: [employeeId], references: [id])
  leaveType         LeaveType      @relation(fields: [leaveTypeId], references: [id])
  organization      Organization   @relation(fields: [organizationId], references: [id])

  @@index([employeeId, leaveTypeId, status, approvedBy])
  @@index([organizationId])
}

model LeaveBalance {
  id                  String      @id @default(uuid())
  leaveTypeId         String
  employeeId          String
  usedLeaveHours      Int
  leaveAllocatedHours Int
  lastUpdated         DateTime   @default(now())
  createdBy           String
  updatedBy           String
  organizationId      String

  employee            User        @relation(fields: [employeeId], references: [id])
  leaveType           LeaveType   @relation(fields: [leaveTypeId], references: [id])
  organization        Organization @relation(fields: [organizationId], references: [id])

  @@index([leaveTypeId, employeeId])
  @@index([organizationId])
}

model FileMgt {
  id              String          @id @default(uuid())
  s3ObjectKey     String          // @unique
  fileName        String
  fileSize        Int
  folderId        String?
  organizationId  String
  uploadedAt      DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  fileStatus      FileStatus      @default(ACTIVE)  // New column for file status
  deletionTime    DateTime?       // Optional, used for soft-deletes with TTL
  organization    Organization    @relation(fields: [organizationId], references: [id])
  folder          Folder?         @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

enum FileStatus {
  ACTIVE
  DELETED
}

model Folder {
  id              String          @id @default(uuid())
  name            String
  parentId        String?         // For nested folders, NULL if it's a root folder
  path            String          // Full folder path (e.g., "/documents/contracts")
  organizationId  String          // Reference to the tenant
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organization    Organization    @relation(fields: [organizationId], references: [id])
  parentFolder    Folder?         @relation("FolderParent", fields: [parentId], references: [id])
  subFolders      Folder[]        @relation("FolderParent")
  files           FileMgt[]       // Files inside this folder
}
