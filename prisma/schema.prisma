// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 BigInt            @id @default(autoincrement())
  email              String            @unique()
  firstName          String
  lastName           String
  gender             Gender
  employmentStatus   EmploymentStatus?  @relation(fields: [employmentStatusId], references: [id])
  employmentStatusId BigInt
  startDate          DateTime
  endDate            DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          BigInt?
  updatedBy          BigInt?
  employeeLevel      EmployeeLevel?    @relation(fields: [employeeLevelId], references: [id])
  employeeLevelId    BigInt?
  empLeaveHistory    EmpLeaveHistory[]
  leaveBalance       LeaveBalance[]
}

model EmploymentStatus {
  id          BigInt  @id @default(autoincrement())
  status      String
  description String
  users       Users[]
}

model EmployeeLevel {
  id               BigInt             @id @default(autoincrement())
  name             String
  description      String?
  leaveAllocations LeaveAllocations[]
  Users            Users[]
}

model LeaveTypes {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   BigInt?
  updatedBy   BigInt?

  empLeaveHistory  EmpLeaveHistory[]
  leaveBalance     LeaveBalance[]
  leaveAllocations LeaveAllocations[]
}

model EmpLeaveHistory {
  id          BigInt      @id @default(autoincrement())
  employeeId  BigInt
  leaveTypeId Int
  leaveHours  BigInt
  status      LeaveStatus
  approvedBy  BigInt?
  comments    String?

  employee  Users      @relation(fields: [employeeId], references: [id])
  leaveType LeaveTypes @relation(fields: [leaveTypeId], references: [id])

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([status])
  @@index([approvedBy])
}

model LeaveAllocations {
  id              BigInt @id @default(autoincrement())
  employeeLevelId BigInt
  leaveTypeId     Int
  totalLeaveHours Int

  employeeLevel EmployeeLevel @relation(fields: [employeeLevelId], references: [id])
  leaveType     LeaveTypes    @relation(fields: [leaveTypeId], references: [id])

  @@index([employeeLevelId])
}

model LeaveBalance {
  id                  BigInt   @id @default(autoincrement())
  employeeId          BigInt
  leaveTypeId         Int
  usedLeaveHours      Int
  leaveAllocatedHours Int
  lastUpdated         DateTime @default(now())
  createdBy           BigInt?
  updatedBy           BigInt?

  employee  Users      @relation(fields: [employeeId], references: [id])
  leaveType LeaveTypes @relation(fields: [leaveTypeId], references: [id])

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([updatedBy])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
